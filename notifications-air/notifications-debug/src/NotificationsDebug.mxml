<?xml version="1.0" encoding="utf-8"?>
<f:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:f="library://ns.feathersui.com/mxml"
               theme="feathers.themes.MetalWorksMobileTheme" showStats="true">


    <fx:Script>
        <![CDATA[
        import com.github.airext.Notifications;
        import com.github.airext.notifications.NotificationCenterAuthorizationOptions;
        import com.github.airext.notifications.NotificationCenterEvent;
        import com.github.airext.notifications.NotificationCenterSettings;
        import com.github.airext.notifications.NotificationChannel;
        import com.github.airext.notifications.NotificationContent;
        import com.github.airext.notifications.NotificationRequest;
        import com.github.airext.notifications.NotificationSound;
        import com.github.airext.notifications.TimeIntervalNotificationTrigger;
        import com.github.airext.permissions.AuthorisationStatus;
        import com.github.airext.permissions.Permission;

        import flash.events.InvokeEvent;
        import flash.desktop.NativeApplication;

        import starling.utils.SystemUtil;

        private function log(...args): void {
            outputText.text += args + "\n";
            outputText.verticalScrollPosition = outputText.maxVerticalScrollPosition;
            trace(args);
        }

        private function isSupportedTapped(): void {
            log("isSupported:" + Notifications.isSupported);
        }

        private function extensionVersionTapped(): void {
            log("extensionVersion:" + Notifications.extensionVersion);
        }

        private function createNotificationChannel(): void {
            if (SystemUtil.isAndroid) {
                var channel: NotificationChannel = new NotificationChannel();
                channel.id = "my_channel";
                channel.name = "My Channel";
                channel.enableLights = true;
                channel.lightColor = 0x00FF00;
                channel.enableVibration = true;
                Notifications.shared.createNotificationChannel(channel);
            }
        }

        private function addRequest(): void {
            var storagePermission: Permission = new Permission(null, new <String>["android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"]);
            storagePermission.request(function (status: AuthorisationStatus): void {
                if (status == AuthorisationStatus.denied) {
                    return;
                }

                doAddRequest();
            });
        }

        private function doAddRequest(): void {
            var content: NotificationContent = new NotificationContent();
            content.title = "Title";
            content.body = "Message";
            content.userInfo = {message: "Hello, world!"};
            content.color = 0x2FA9E5;
//            content.sound = new NotificationSound("alert_17.wav");
            content.sound = new NotificationSound("sub.caf");
//                content.sound = new NotificationSound("alert_tone.mp3");

            var trigger: TimeIntervalNotificationTrigger = new TimeIntervalNotificationTrigger(8, false);
            trigger.exactTime = true;
            var request: NotificationRequest = new NotificationRequest(1, content, trigger);
            request.setChannelId("my_channel");

            Notifications.shared.add(request, function (error: Error): void {
                if (error) {
                    log(error);
                } else {
                    log("Notification requested: " + request, "at", new Date());
                }
            });
        }

        private function hasPendingNotificationTapped(): void {
            Notifications.shared.hasPendingRequestWithIdentifier(1, function (...rest): void {
                log("has pending notification: " + rest);
            });
        }

        //

        public function cancelLatestRequestIfExists(): void {
            Notifications.shared.removePendingNotificationRequests(new <int>[1]);
        }

        //

        private function localNotificationRequestAuthorization(): void {
            var options: int = NotificationCenterAuthorizationOptions.alert.rawValue | NotificationCenterAuthorizationOptions.sound.rawValue;
            Notifications.requestAuthorizationWithOptions(options, function (status: String, error: Error = null): void {
                log(status, error);
            });
        }

        private function localNotificationGetNotificationSettings(): void {
            Notifications.getNotificationSettingsWithCompletion(function (settings: NotificationCenterSettings, error: Error = null): void {
                if (settings) {
                    log(settings.authorizationStatus);
                } else {
                    log("Error: " + error);
                }

            });
        }
        ]]>
    </fx:Script>

    <f:creationComplete><![CDATA[
            NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, function(event: InvokeEvent): void {
                log("Invoked with: reason:", event.reason, "args:", event.arguments);
            });

            Notifications.shared.addEventListener(NotificationCenterEvent.NOTIFICATION_RECEIVED_IN_FOREGROUND, function (event: NotificationCenterEvent): void {
                log("Notification received in foreground at", new Date());
            });

            Notifications.shared.addEventListener(NotificationCenterEvent.NOTIFICATION_RECEIVED_IN_BACKGROUND, function (event: NotificationCenterEvent): void {
                log("Notification received in background at", new Date());
            });
        ]]></f:creationComplete>

    <f:layout>
        <f:VerticalLayout />
    </f:layout>

    <f:ScrollContainer>
        <f:layoutData>
            <f:VerticalLayoutData percentHeight="100" percentWidth="100" />
        </f:layoutData>
        <f:layout><f:VerticalLayout horizontalAlign="justify" gap="10" /></f:layout>
        <f:Button label="Is Supported" triggered="isSupportedTapped()" />
        <f:Button label="Extensions Version" triggered="extensionVersionTapped()" />

        <f:Label text="Local Notifications">
            <f:textRendererProperties>
                <fx:Object>
                    <fx:textAlign>center</fx:textAlign>
                </fx:Object>
            </f:textRendererProperties>
        </f:Label>

        <f:Button label="extensionVersion" triggered="log(Notifications.extensionVersion)" />
        <f:Button label="nativeVersion" triggered="log(Notifications.nativeVersion)" />
        <f:Button label="createNotificationChannel" triggered="createNotificationChannel()" />
        <f:Button label="addRequest" triggered="addRequest()" />
        <f:Button label="hasPendingRequest" triggered="hasPendingNotificationTapped()" />
        <f:Button label="cancelRequest" triggered="cancelLatestRequestIfExists()" />
        <f:Button label="IsEnabled" triggered="log(Notifications.isEnabled)" />
        <f:Button label="CanOpenSettings" triggered="log(Notifications.canOpenSettings)" />
        <f:Button label="OpenSettings" triggered="Notifications.openSettings()" />
        <f:Button label="RequestAuthorization" triggered="localNotificationRequestAuthorization()" />
        <f:Button label="GetNotificationSettings" triggered="localNotificationGetNotificationSettings()" />

    </f:ScrollContainer>

    <f:ScrollText id="outputText" height="100">
        <f:layoutData>
            <f:VerticalLayoutData percentWidth="100" />
        </f:layoutData>
    </f:ScrollText>

</f:Application>
